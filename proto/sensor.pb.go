// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.1
// source: proto/sensor.proto

package sensor

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SensorDataRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          *SensorData            `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SensorDataRequest) Reset() {
	*x = SensorDataRequest{}
	mi := &file_proto_sensor_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SensorDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorDataRequest) ProtoMessage() {}

func (x *SensorDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sensor_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorDataRequest.ProtoReflect.Descriptor instead.
func (*SensorDataRequest) Descriptor() ([]byte, []int) {
	return file_proto_sensor_proto_rawDescGZIP(), []int{0}
}

func (x *SensorDataRequest) GetData() *SensorData {
	if x != nil {
		return x.Data
	}
	return nil
}

type SensorDataResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Success         bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message         string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ServerTimestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=server_timestamp,json=serverTimestamp,proto3" json:"server_timestamp,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SensorDataResponse) Reset() {
	*x = SensorDataResponse{}
	mi := &file_proto_sensor_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SensorDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorDataResponse) ProtoMessage() {}

func (x *SensorDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sensor_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorDataResponse.ProtoReflect.Descriptor instead.
func (*SensorDataResponse) Descriptor() ([]byte, []int) {
	return file_proto_sensor_proto_rawDescGZIP(), []int{1}
}

func (x *SensorDataResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SensorDataResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SensorDataResponse) GetServerTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.ServerTimestamp
	}
	return nil
}

type SensorData struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	SensorId           string                 `protobuf:"bytes,1,opt,name=sensor_id,json=sensorId,proto3" json:"sensor_id,omitempty"`                                                                                             // Unique ID of the sensor
	Timestamp          *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                                                                                           // // Collection timestamp
	Location           *Location              `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`                                                                                                             // Sensor location
	TemperatureCelsius float64                `protobuf:"fixed64,4,opt,name=temperature_celsius,json=temperatureCelsius,proto3" json:"temperature_celsius,omitempty"`                                                             // Celsius temperature
	PressureHpa        float64                `protobuf:"fixed64,5,opt,name=pressure_hpa,json=pressureHpa,proto3" json:"pressure_hpa,omitempty"`                                                                                  // Atmospheric Pression in hPa
	HumidityPercent    float64                `protobuf:"fixed64,6,opt,name=humidity_percent,json=humidityPercent,proto3" json:"humidity_percent,omitempty"`                                                                      // Relative humidity in %
	NoiseLevelDb       float64                `protobuf:"fixed64,7,opt,name=noise_level_db,json=noiseLevelDb,proto3" json:"noise_level_db,omitempty"`                                                                             // Noise level in dB
	LightIntensityLux  float64                `protobuf:"fixed64,8,opt,name=light_intensity_lux,json=lightIntensityLux,proto3" json:"light_intensity_lux,omitempty"`                                                              // Light intensity em lux
	AirQualityIndex    float64                `protobuf:"fixed64,9,opt,name=air_quality_index,json=airQualityIndex,proto3" json:"air_quality_index,omitempty"`                                                                    // Quality index of the air
	VibrationLevel     float64                `protobuf:"fixed64,10,opt,name=vibration_level,json=vibrationLevel,proto3" json:"vibration_level,omitempty"`                                                                        // Vibration level
	Battery            *BatteryInfo           `protobuf:"bytes,11,opt,name=battery,proto3" json:"battery,omitempty"`                                                                                                              // Battery information
	CustomMetrics      map[string]float64     `protobuf:"bytes,12,rep,name=custom_metrics,json=customMetrics,proto3" json:"custom_metrics,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"` // Customized metrics what can define by user
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SensorData) Reset() {
	*x = SensorData{}
	mi := &file_proto_sensor_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SensorData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorData) ProtoMessage() {}

func (x *SensorData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sensor_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorData.ProtoReflect.Descriptor instead.
func (*SensorData) Descriptor() ([]byte, []int) {
	return file_proto_sensor_proto_rawDescGZIP(), []int{2}
}

func (x *SensorData) GetSensorId() string {
	if x != nil {
		return x.SensorId
	}
	return ""
}

func (x *SensorData) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *SensorData) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *SensorData) GetTemperatureCelsius() float64 {
	if x != nil {
		return x.TemperatureCelsius
	}
	return 0
}

func (x *SensorData) GetPressureHpa() float64 {
	if x != nil {
		return x.PressureHpa
	}
	return 0
}

func (x *SensorData) GetHumidityPercent() float64 {
	if x != nil {
		return x.HumidityPercent
	}
	return 0
}

func (x *SensorData) GetNoiseLevelDb() float64 {
	if x != nil {
		return x.NoiseLevelDb
	}
	return 0
}

func (x *SensorData) GetLightIntensityLux() float64 {
	if x != nil {
		return x.LightIntensityLux
	}
	return 0
}

func (x *SensorData) GetAirQualityIndex() float64 {
	if x != nil {
		return x.AirQualityIndex
	}
	return 0
}

func (x *SensorData) GetVibrationLevel() float64 {
	if x != nil {
		return x.VibrationLevel
	}
	return 0
}

func (x *SensorData) GetBattery() *BatteryInfo {
	if x != nil {
		return x.Battery
	}
	return nil
}

func (x *SensorData) GetCustomMetrics() map[string]float64 {
	if x != nil {
		return x.CustomMetrics
	}
	return nil
}

type Location struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Latitude       float64                `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude      float64                `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	AltitudeMeters float64                `protobuf:"fixed64,3,opt,name=altitude_meters,json=altitudeMeters,proto3" json:"altitude_meters,omitempty"`
	Description    string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Location) Reset() {
	*x = Location{}
	mi := &file_proto_sensor_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sensor_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_proto_sensor_proto_rawDescGZIP(), []int{3}
}

func (x *Location) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Location) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *Location) GetAltitudeMeters() float64 {
	if x != nil {
		return x.AltitudeMeters
	}
	return 0
}

func (x *Location) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type BatteryInfo struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Voltage            float64                `protobuf:"fixed64,1,opt,name=voltage,proto3" json:"voltage,omitempty"`
	ChargePercent      float64                `protobuf:"fixed64,2,opt,name=charge_percent,json=chargePercent,proto3" json:"charge_percent,omitempty"`
	IsCharging         bool                   `protobuf:"varint,3,opt,name=is_charging,json=isCharging,proto3" json:"is_charging,omitempty"`
	TemperatureCelsius float64                `protobuf:"fixed64,4,opt,name=temperature_celsius,json=temperatureCelsius,proto3" json:"temperature_celsius,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *BatteryInfo) Reset() {
	*x = BatteryInfo{}
	mi := &file_proto_sensor_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatteryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatteryInfo) ProtoMessage() {}

func (x *BatteryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sensor_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatteryInfo.ProtoReflect.Descriptor instead.
func (*BatteryInfo) Descriptor() ([]byte, []int) {
	return file_proto_sensor_proto_rawDescGZIP(), []int{4}
}

func (x *BatteryInfo) GetVoltage() float64 {
	if x != nil {
		return x.Voltage
	}
	return 0
}

func (x *BatteryInfo) GetChargePercent() float64 {
	if x != nil {
		return x.ChargePercent
	}
	return 0
}

func (x *BatteryInfo) GetIsCharging() bool {
	if x != nil {
		return x.IsCharging
	}
	return false
}

func (x *BatteryInfo) GetTemperatureCelsius() float64 {
	if x != nil {
		return x.TemperatureCelsius
	}
	return 0
}

var File_proto_sensor_proto protoreflect.FileDescriptor

const file_proto_sensor_proto_rawDesc = "" +
	"\n" +
	"\x12proto/sensor.proto\x12\x06sensor\x1a\x1fgoogle/protobuf/timestamp.proto\";\n" +
	"\x11SensorDataRequest\x12&\n" +
	"\x04data\x18\x01 \x01(\v2\x12.sensor.SensorDataR\x04data\"\x8f\x01\n" +
	"\x12SensorDataResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12E\n" +
	"\x10server_timestamp\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\x0fserverTimestamp\"\xfa\x04\n" +
	"\n" +
	"SensorData\x12\x1b\n" +
	"\tsensor_id\x18\x01 \x01(\tR\bsensorId\x128\n" +
	"\ttimestamp\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12,\n" +
	"\blocation\x18\x03 \x01(\v2\x10.sensor.LocationR\blocation\x12/\n" +
	"\x13temperature_celsius\x18\x04 \x01(\x01R\x12temperatureCelsius\x12!\n" +
	"\fpressure_hpa\x18\x05 \x01(\x01R\vpressureHpa\x12)\n" +
	"\x10humidity_percent\x18\x06 \x01(\x01R\x0fhumidityPercent\x12$\n" +
	"\x0enoise_level_db\x18\a \x01(\x01R\fnoiseLevelDb\x12.\n" +
	"\x13light_intensity_lux\x18\b \x01(\x01R\x11lightIntensityLux\x12*\n" +
	"\x11air_quality_index\x18\t \x01(\x01R\x0fairQualityIndex\x12'\n" +
	"\x0fvibration_level\x18\n" +
	" \x01(\x01R\x0evibrationLevel\x12-\n" +
	"\abattery\x18\v \x01(\v2\x13.sensor.BatteryInfoR\abattery\x12L\n" +
	"\x0ecustom_metrics\x18\f \x03(\v2%.sensor.SensorData.CustomMetricsEntryR\rcustomMetrics\x1a@\n" +
	"\x12CustomMetricsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x01R\x05value:\x028\x01\"\x8f\x01\n" +
	"\bLocation\x12\x1a\n" +
	"\blatitude\x18\x01 \x01(\x01R\blatitude\x12\x1c\n" +
	"\tlongitude\x18\x02 \x01(\x01R\tlongitude\x12'\n" +
	"\x0faltitude_meters\x18\x03 \x01(\x01R\x0ealtitudeMeters\x12 \n" +
	"\vdescription\x18\x04 \x01(\tR\vdescription\"\xa0\x01\n" +
	"\vBatteryInfo\x12\x18\n" +
	"\avoltage\x18\x01 \x01(\x01R\avoltage\x12%\n" +
	"\x0echarge_percent\x18\x02 \x01(\x01R\rchargePercent\x12\x1f\n" +
	"\vis_charging\x18\x03 \x01(\bR\n" +
	"isCharging\x12/\n" +
	"\x13temperature_celsius\x18\x04 \x01(\x01R\x12temperatureCelsius2\xa1\x01\n" +
	"\aGreeter\x12G\n" +
	"\x0eSendSensorData\x12\x19.sensor.SensorDataRequest\x1a\x1a.sensor.SensorDataResponse\x12M\n" +
	"\x10StreamSensorData\x12\x19.sensor.SensorDataRequest\x1a\x1a.sensor.SensorDataResponse(\x010\x01B-Z+github.com/sensor-data-sim/pkg/proto/sensorb\x06proto3"

var (
	file_proto_sensor_proto_rawDescOnce sync.Once
	file_proto_sensor_proto_rawDescData []byte
)

func file_proto_sensor_proto_rawDescGZIP() []byte {
	file_proto_sensor_proto_rawDescOnce.Do(func() {
		file_proto_sensor_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_sensor_proto_rawDesc), len(file_proto_sensor_proto_rawDesc)))
	})
	return file_proto_sensor_proto_rawDescData
}

var file_proto_sensor_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_proto_sensor_proto_goTypes = []any{
	(*SensorDataRequest)(nil),     // 0: sensor.SensorDataRequest
	(*SensorDataResponse)(nil),    // 1: sensor.SensorDataResponse
	(*SensorData)(nil),            // 2: sensor.SensorData
	(*Location)(nil),              // 3: sensor.Location
	(*BatteryInfo)(nil),           // 4: sensor.BatteryInfo
	nil,                           // 5: sensor.SensorData.CustomMetricsEntry
	(*timestamppb.Timestamp)(nil), // 6: google.protobuf.Timestamp
}
var file_proto_sensor_proto_depIdxs = []int32{
	2, // 0: sensor.SensorDataRequest.data:type_name -> sensor.SensorData
	6, // 1: sensor.SensorDataResponse.server_timestamp:type_name -> google.protobuf.Timestamp
	6, // 2: sensor.SensorData.timestamp:type_name -> google.protobuf.Timestamp
	3, // 3: sensor.SensorData.location:type_name -> sensor.Location
	4, // 4: sensor.SensorData.battery:type_name -> sensor.BatteryInfo
	5, // 5: sensor.SensorData.custom_metrics:type_name -> sensor.SensorData.CustomMetricsEntry
	0, // 6: sensor.Greeter.SendSensorData:input_type -> sensor.SensorDataRequest
	0, // 7: sensor.Greeter.StreamSensorData:input_type -> sensor.SensorDataRequest
	1, // 8: sensor.Greeter.SendSensorData:output_type -> sensor.SensorDataResponse
	1, // 9: sensor.Greeter.StreamSensorData:output_type -> sensor.SensorDataResponse
	8, // [8:10] is the sub-list for method output_type
	6, // [6:8] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_proto_sensor_proto_init() }
func file_proto_sensor_proto_init() {
	if File_proto_sensor_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_sensor_proto_rawDesc), len(file_proto_sensor_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_sensor_proto_goTypes,
		DependencyIndexes: file_proto_sensor_proto_depIdxs,
		MessageInfos:      file_proto_sensor_proto_msgTypes,
	}.Build()
	File_proto_sensor_proto = out.File
	file_proto_sensor_proto_goTypes = nil
	file_proto_sensor_proto_depIdxs = nil
}
